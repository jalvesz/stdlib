! SPDX-Identifier: MIT

#:include "common.fypp"
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))
#:set RC_KINDS_TYPES = R_KINDS_TYPES + C_KINDS_TYPES

!> The Matrix Market (MM) format is a simple, human-readable, ASCII format for sparse 
!> and dense matrices. The format was developed at NIST (National Institute of Standards 
!> and Technology) for the Matrix Market, a repository of test matrices for use in 
!> comparative studies of algorithms for numerical linear algebra.
!>
!> For more information, see: https://math.nist.gov/MatrixMarket/formats.html
module stdlib_io_mm
    use stdlib_kinds, only : int8, int16, int32, int64, sp, dp, xdp, qp
    use stdlib_sparse_kinds
    implicit none
    private

    type, public :: mm_header_type
        integer :: object
        integer :: format
        integer :: qualifier
        integer :: symmetry
        character(len=1024), allocatable :: comments(:)
    end type mm_header_type

    !> Version: experimental
    !>
    !> Load a matrix from a Matrix Market file
    !> ([Specification](../page/specs/stdlib_io.html#load_mm))
    interface load_mm
        #:for k, t, s in RC_KINDS_TYPES
        module subroutine load_mm_dense_${s}$(filename, matrix, iostat, iomsg)
            !> Name of the Matrix Market file to load from
            character(len=*), intent(in) :: filename
            !> Matrix to be loaded from the Matrix Market file
            ${t}$, allocatable, intent(out) :: matrix(:,:)
            !> Error status of loading, zero on success
            integer, intent(out), optional :: iostat
            !> Associated error message in case of non-zero status code
            character(len=:), allocatable, intent(out), optional :: iomsg
        end subroutine
        #:endfor
        #:for k, t, s in RC_KINDS_TYPES
        module subroutine load_mm_coo_${s}$(filename, matrix, iostat, iomsg)
            !> Name of the Matrix Market file to load from
            character(len=*), intent(in) :: filename
            !> Matrix to be loaded from the Matrix Market file
            type(COO_${s}$_type), intent(out) :: matrix
            !> Error status of loading, zero on success
            integer, intent(out), optional :: iostat
            !> Associated error message in case of non-zero status code
            character(len=:), allocatable, intent(out), optional :: iomsg
        end subroutine
        #:endfor
    end interface
    public :: load_mm

    !> Version: experimental
    !>
    !> Save a matrix to a Matrix Market file
    !> ([Specification](../page/specs/stdlib_io.html#save_mm))
    interface save_mm
        #:for k, t, s in RC_KINDS_TYPES
        module subroutine save_mm_dense_${s}$(filename, matrix, header_info, iostat, iomsg)
            character(len=*), intent(in) :: filename
            ${t}$, intent(in) :: matrix(:,:)
            character(len=*), intent(in), optional :: header_info
            integer, intent(out), optional :: iostat
            character(len=:), allocatable, intent(out), optional :: iomsg
        end subroutine 
        #:endfor
    end interface save_mm
    public :: save_mm

    ! Matrix Market format constants
    character(len=*), parameter :: MM_BANNER = "%%MatrixMarket"
    character(len=*), parameter :: MM_COMMENT_CHAR = "%"
    
    ! Matrix Market object types
    character(len=*), parameter :: &
        MM_MATRIX = "matrix", &
        MM_VECTOR = "vector"
    
    ! Matrix Market format types  
    character(len=*), parameter :: &
        MM_COORDINATE = "coordinate", &
        MM_ARRAY = "array"
    
    ! Matrix Market data types
    character(len=*), parameter :: &
        MM_REAL = "real", &
        MM_COMPLEX = "complex", &
        MM_INTEGER = "integer", &
        MM_PATTERN = "pattern"
    
    ! Matrix Market storage schemes
    character(len=*), parameter :: &
        MM_GENERAL = "general", &
        MM_SYMMETRIC = "symmetric", &
        MM_SKEW_SYMMETRIC = "skew-symmetric", &
        MM_HERMITIAN = "hermitian"

    public :: MM_BANNER, MM_COMMENT_CHAR
    public :: MM_MATRIX, MM_VECTOR
    public :: MM_COORDINATE, MM_ARRAY  
    public :: MM_REAL, MM_COMPLEX, MM_INTEGER, MM_PATTERN
    public :: MM_GENERAL, MM_SYMMETRIC, MM_SKEW_SYMMETRIC, MM_HERMITIAN

end module stdlib_io_mm